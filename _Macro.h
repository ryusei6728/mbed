
/*　**********************************
		Macro　Header
********************************** */



/* **********************************
        LIMMIT - 値制限 -
********************************** */
/**
 * 指定された2つの引数のうち,最大のものを返す.
 * @param [in] a        判断する変数
 * @param [in] b        制限の最小値
 * @param [in] c        制限の最大値
 * @retval 制限値
 * @attention 引数は複数回評価される.
 */
#define LIM(x, min , max) ((x) < (min) ? (min) : ( (x) > (max) ? (max) : (x) ))

/* **********************************
        Proportional - 比例計算 -
********************************** */
/**
 * 指定された4つの引数で表される比例式から,計算結果を返す.
 * @param [in] x        入力値
 * @param [in] X1
 * @param [in] X2
 * @param [in] Y1
 * @param [in] Y2
 * @retval 比例値
 * @attention 引数は複数回評価される.
 */
#define PRO_CAL(x,X1,X2,Y1,Y2)	( (X1) < (X2) ? ( (((Y2)-(Y1))*((LIM(x,X1,X2))-(X1)))/((X2)-(X1)) + (Y1) ) : ( (((Y2)-(Y1))*((LIM(x,X2,X1))-(X1)))/((X2)-(X1)) + (Y1) ) )

/* **********************************
        ABSOLUTE  - 絶対値取得 -
********************************** */
/**
 * 指定された値の絶対値を返す.
 * @param [in] a        最大値を選ぶ対象の変数1
 * @retval 絶対値
 * @attention 引数は複数回評価される.
 */
#define ABS(a) ((a) > (0) ? (a) : (-(a)))


/* **********************************
        MAX - 最大値取得 -
********************************** */
/**
 * 指定された2つの引数のうち,最大のものを返す.
 * @param [in] a        最大値を選ぶ対象の変数1
 * @param [in] b        最大値を選ぶ対象の変数2
 * @retval 最大値
 * @attention 引数は複数回評価される.
 */
#define MAX(a, b) ((a) > (b) ? (a) : (b))


/*　**********************************
        MAX3 - 最大値取得 -
********************************** */
/**
 * 指定された3つの引数のうち,最大のものを返す.
 * @param [in] a        最大値を選ぶ対象の変数1
 * @param [in] b        最大値を選ぶ対象の変数2
 * @param [in] c        最大値を選ぶ対象の変数3
 * @retval 最大値
 * @attention 引数は複数回評価される.
 */
#define MAX3(a, b, c) ((a) > (MAX(b, c)) ? (a) : (MAX(b, c)))


/*　**********************************
        MIN - 最小値取得 -
********************************** */
/**
 * 指定された2つの引数のうち,最小のものを返す.
 * @param [in] a        最小値を選ぶ対象の変数1
 * @param [in] b        最小値を選ぶ対象の変数2
 * @retval 最小値
 * @attention 引数は複数回評価される.
 */
#define MIN(a, b) ((a) < (b) ? (a) : (b))


/*　**********************************
        MIN3 - 最小値取得 -
********************************** */
/**
 * 指定された3つの引数のうち,最小のものを返す.
 * @param [in] a        最小値を選ぶ対象の変数1
 * @param [in] b        最小値を選ぶ対象の変数2
 * @param [in] c        最小値を選ぶ対象の変数3
 * @retval 最小値
 * @attention 引数は複数回評価される.
 */
#define MIN3(a, b, c) ((a) < (MIN(b, c)) ? (a) : (MIN(b, c)))


/*　**********************************
        INSIDE - 範囲内判定 -
********************************** */
/**
 * 指定の範囲内かを判定する.
 * 判定対象xがa〜bの範囲内なら真を返却.
 * @param [in] x        判定対象
 * @param [in] a        範囲(小)
 * @param [in] b        範囲(大)
 * @retval 範囲内なら真.範囲外なら偽
 * @attention 範囲の引数はa<=bであること.
 * @attention 引数は複数回評価される.
 */
#define INSIDE(x, min, max) ((x) >= min && (x) <= max)


/*　**********************************
        INCREMENT - インクリメント -
********************************** */
/**
 * 引数に1を足す.その際,指定の最大値になったら0に戻す.
 * @param [in] a        インクリメント対象の変数
 * @param [in] max      最大値
 * @retval 1足された数
 * @attention 返却値はmaxにはならない.
 * @attention 1足した後の値がmaxなら0が返却される.
 */
#define INCREMENT(a, max) ((a) = ((a) + 1) % (max))

/*　**********************************
        DECREMENT - デクリメント -
********************************** */
/**
 * 引数から1を引く.0以下が渡された場合は,指定の最大値を返す.
 * @param [in] a        デクリメント対象の変数
 * @param [in] max      最大値
 * @retval 1引かれた数
 * @attention 返却値はmax未満.
 * @attention 1引いた後の値が負ならmax-1を返却.
 */
#define DECREMENT(a, max) (((a) = (a) - 1) < 0 ? ((a) = (max) - 1) : (a))

